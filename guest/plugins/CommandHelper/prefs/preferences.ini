# This file is generated automatically. Changes made to the values of this file
# will persist, but changes to comments will not. For windows file paths,
# use either / or \\, but not a single \.

[General]
# Makes command matching be case sensitive. If set to false, if your config defines /cmd, but the user runs /CMD, it will 
# trigger the command anyways.
case-sensitive=false

# Whether or not to halt compilation of pure mscript files if a compilation failure occurs in any one of the files.
halt-on-failure=false

# The path to the main file, relative to the CommandHelper folder
main-file=main.ms

# Makes CommandHelper play dirty and break all sorts of programming rules, so that other plugins can't interfere with the 
# operations that you defined. Note that doing this essentially makes CommandHelper have absolute say over commands. Use 
# this setting only if you can't get another plugin to cooperate with CH, because it is a global setting.
play-dirty=false

# The path to the default config file, relative to the CommandHelper plugin folder
script-name=aliases.msa

# Whether or not to show the splash screen at server startup
show-splash-screen=true

# Whether or not to display warnings in the console, while compiling
show-warnings=true

# If set to true, forces all files that do not specifically set strict mode on or off into strict mode. See the 
# documentation for more information about what strict mode does.
strict-mode=false

# Whether or not to use console colors.
use-colors=true

[Debugging]
# Whether or not to display debug information in the console
debug-mode=false

# Setting this to true allows you to scream errors. Regardless of other settings that you may have unintentionally 
# configured, this will override all ways of suppressing fatal errors, including uncaught exception handlers, error 
# logging turned off, etc. This is meant as a last ditch effort to diagnosing an error. This implicitly turns debug mode 
# on as well, which will cause even more error logging to occur.
scream-errors=false

[Logging]
# Settings related to logging capabilities.

# If set to false, the Debug class of functions will do nothing.
allow-debug-logging=false

# Whether or not to display the original command in the console when it is run
console-log-commands=true

# The path to the debug output log file. Six variables are available, %Y, %M, and %D, %h, %m, %s, which are replaced with 
# the current year, month, day, hour, minute and second respectively. It is highly recommended that you use at least 
# year, month, and day if you are for whatever reason leaving logging on, otherwise the file size would get excessively 
# large. The path is relative to the CommandHelper directory and is not bound by the base-dir restriction. The logger 
# preferences file is created in the same directory this file is in as well, and is named loggerPreferences.txt
debug-log-file=logs/debug/%Y-%M-%D-debug.log

# The path the standard log files that the log() function writes to. Six variables are available, %Y, %M, and %D, %h, %m, 
# %s, which are replaced with the current year, month, day, hour, minute and second respectively. It is highly 
# recommended that you use at least year, month, and day if you are actively logging things, otherwise the file size 
# would get excessively large. The path is relative to the CommandHelper directory and is not bound by the base-dir 
# restriction.
standard-log-file=logs/%Y-%M-%D-commandhelper.log

[Profiling]
# Settings related to the built in profiler.

# If set to false, the Profiling class of functions will do nothing.
allow-profiling=false

# The path to the profiling logs. These logs are perf4j formatted logs. Consult the documentation for more information.
profiling-file=logs/profiling/%Y-%M-%D-profiling.log

[Security]
# Security related settings. Please ensure you understand the impact of changing these, as the defaults have been 
# carefully selected.

# If true, allows use of the shell() functions from dynamic code sources, i.e interpreter or eval(). This almost 
# certainly should always remain false, and if enabled, enabled only temporarily. If this is true, if an account with 
# interpreter mode is compromised, the attacker could gain access to your entire server, under the user running 
# minecraft, not just the game server.
allow-dynamic-shell=false

# If true, allows for the shell functions to be used from outside of cmdline mode. WARNING: Enabling these functions can 
# be extremely dangerous if you accidentally allow uncontrolled access to them, and can grant full control of your server 
# if not careful. Leave this set to false unless you really know what you're doing.
allow-shell-commands=false

# The base directory/directories that scripts can read and write to. If left blank, then the default of the server 
# directory will be used. This setting affects functions like include and read. Multiple directories may be specified, 
# use ';' to separate file paths. For security reasons, symlinks are resolved to their actual location on disk, so if you 
# intend for a symlinked folder to be accessible, you need to mark the location of the actual folder as accessible, even 
# if the symlink itself is within another entry in the list. Note that empty paths are supported when splitting the path, 
# and having a trailing ';' will cause the default path to be added, so don't end the path with a trailing ; if you don't 
# intend for the path to include the default.
base-dir=

# Whether or not to enable the /interpreter command. Note that even with this enabled, a player must still have the 
# commandhelper.interpreter permission, but setting it to false prevents all players from accessing the interpreter 
# regardless of their permissions.
enable-interpreter=false

# Sets the time (in minutes) that interpreter mode is unlocked for when /interpreter-on is run from console. Set to 0 (or 
# a negative number) to disable this feature, and allow interpreter mode all the time. It is highly recommended that you 
# leave this set to some number greater than 0, to enhance server security, and require a "two step" authentication for 
# interpreter mode.
interpreter-timeout=15

# If true, sudo() will use a less safe fallback method if it fails. See the documentation on the sudo function for more 
# details. If this is true, a warning is issued at startup.
use-sudo-fallback=false

[Telemetry]
# Help make MethodScript better! These settings control the telemetry mechanism. Your privacy is extremely important, see 
# the telemetry.ini config file for more information.

# If enabled, instead of sending Telemetry data to the server, it prints to screen. This allows you to validate that no 
# more data than you expect is being sent as part of the telemetry data set.
telemetry-audit=false

# If set to "nag", shows a request to enable telemetry. If "false", telemetry is not logged, and the request to enable is 
# removed. If set to "true", telemetry is enabled per the telemetry config.
telemetry-on=nag

# If telemetry data collection is turned on, and you update, and a new collection mechanism was added to the 
# telemetry.ini file, and this is enabled, the new value in the configuration will default to being collected. Otherwise, 
# if this is false, it will default to "nag". In any case, this setting doesn't matter if telemetry-on is "false".
telemetry-pref-default-collect=true

